module namespace mim="http://www.cnio.es/scombio/jmfernandez/ORFandDB/4.0/OMIM";

(:
declare option exist:optimize "enable=yes";
:)

import module namespace ens="http://www.cnio.es/scombio/jmfernandez/widget/ensembl" at "java:org.cnio.scombio.jmfernandez.widget.exist.EnsemblModule";
import module namespace ft="http://exist-db.org/xquery/lucene";

declare function mim:getRecord($mimNumber as xs:string) as element(mim:record)?
{
	collection('/db/OMIM')//mim:record[@mimNumber=$mimNumber]
};

declare function mim:getRecord($mimNumber as xs:string,$term as xs:string) as element(mim:record)?
{
	let $result:=collection('/db/OMIM')//mim:record[@mimNumber=$mimNumber][ft:query(.,$term)]
	return
	if($result) then
		util:expand($result)
	else
		collection('/db/OMIM')//mim:record[@mimNumber=$mimNumber]
};

declare function mim:getRecordsFromEnsID($ensID as xs:string) as element(mim:record)*
{
	for $mimNumber in ens:getmimrefs($ensID)
		return collection('/db/OMIM')//mim:record[@mimNumber=$mimNumber]
};

declare function mim:getEnsIDWithFTS($term as xs:string) as xs:string*
{
	distinct-values(for $entry in collection('/db/OMIM')//mim:record[ft:query(.,$term)] return ens:fetchbymimrefs($entry/@mimNumber))
};

declare function mim:getRecordsWithFTS($term as xs:string) as element(mim:record)*
{
	for $s in collection('/db/OMIM')//mim:record[ft:query(.,$term)]
	order by ft:score($s) descending
	return $s
};
