/* Generated by Together */

package org.ensembl.datamodel.impl;

import java.util.Collections;
import java.util.List;
import java.util.logging.Logger;

import org.ensembl.datamodel.Marker;
import org.ensembl.driver.AdaptorException;
import org.ensembl.driver.CoreDriver;

public class MarkerImpl extends PersistentImpl implements Marker {

  /**
   * Used by the (de)serialization system to determine if the data 
   * in a serialized instance is compatible with this class.
   *
   * It's presence allows for compatible serialized objects to be loaded when
   * the class is compatible with the serialized instance, even if:
   *
   * <ul>
   * <li> the compiler used to compile the "serializing" version of the class
   * differs from the one used to compile the "deserialising" version of the
   * class.</li>
   *
   * <li> the methods of the class changes but the attributes remain the same.</li>
   * </ul>
   *
   * Maintainers must change this value if and only if the new version of
   * this class is not compatible with old versions. e.g. attributes
   * change. See Sun docs for <a
   * href="http://java.sun.com/j2se/1.4.2/docs/guide/serialization/">
   * details. </a>
   *
   */
  private static final long serialVersionUID = 1L;



  private String displayName;
  private List markerFeatures;
  private static final Logger logger =
    Logger.getLogger(MarkerImpl.class.getName());

  public MarkerImpl() {
    super();
  }

  public MarkerImpl(CoreDriver driver) {
    super(driver);
  }

  public static void main(String[] argv) {
  }

  /**
  * @return Ordered list of synonyms, primary synonym first.
  * */
  public List getSynonyms() {
    return synonyms;
  }

  public void setSynonyms(List synonyms) {
    this.synonyms = synonyms;
  }

  public Object clone() {
    return null;
  }

  public String getSeqRight() {
    return seqRight;
  }

  public void setSeqRight(String seqRight) {
    this.seqRight = seqRight;
  }

  public String getSeqLeft() {
    return seqLeft;
  }

  public void setSeqLeft(String seqLeft) {
    this.seqLeft = seqLeft;
  }

  public String toString() {

    StringBuffer buf = new StringBuffer();
    buf.append("[");

    buf.append(super.toString()).append(", ");
    buf.append("seqLeft=").append(seqLeft).append(", ");
    buf.append("seqRight=").append(seqRight).append(", ");
    buf.append("synonyms=").append(synonyms).append(", ");
    buf.append("priority=").append(priority).append(", ");
    buf.append("]");
    return buf.toString();
  }

  /**
   * WARNING: this a very slow call if the marker appears many times on the genome.
   */
  public List getLocations() {

    if (locations == null) {
      if (driver != null)
        lazyLoadLocations();
      else
        locations = Collections.EMPTY_LIST;
    }

    return locations;
  }

  private void lazyLoadLocations() {
    try {
      driver.getMarkerAdaptor().fetchComplete(this);
    } catch (AdaptorException e) {
      logger.warning("Failed to lazy load marker locations:" + this +  e.getMessage());
    }
  }

  public void setLocations(List locations) {
    this.locations = locations;
  }

  public int getPriority() {
    return priority;
  }

  public void setPriority(int priority) {
    this.priority = priority;
  }

  public int getMaxPrimerDistance() {
    return maxPrimerDistance;
  }

  public void setMaxPrimerDistance(int maxPrimerDistance) {
    this.maxPrimerDistance = maxPrimerDistance;
  }

  public int getMinPrimerDistance() {
    return minPrimerDistance;
  }

  public void setMinPrimerDistance(int minPrimerDistance) {
    this.minPrimerDistance = minPrimerDistance;
  }

  private String type;

  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public int getLocationCount() {
    return getLocations().size();
  }

  private List synonyms;
  private String seqRight;
  private String seqLeft;
  private List locations;
  private int priority;
  private int maxPrimerDistance;
  private int minPrimerDistance;
  
  
  public List getMarkerFeatures() {
    if (markerFeatures==null && driver!=null ) 
      try {
        driver.getMarkerAdaptor().fetchComplete(this);
      } catch (AdaptorException e) {
        throw new RuntimeException("Failed to lazy load marker features for Marker:"+this,e);
      } 
    return markerFeatures;
  }


  public void setMarkerFeatures(List markerFeatures) {
    this.markerFeatures = markerFeatures;    
  }

  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }
}
