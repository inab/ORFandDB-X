<?xml version="1.0"?>

<!--

  Ant build file for the ensj project.

  Loads properties from './build.properties'.

  see:
  <a href="http://jakarta.apache.org/ant">Ant Project Homepage</a>

  targets:

    run "ant -projecthelp" to see list of targets.

  dependencies:
    junit.jar             -needed to run regression tests
    xalan.jar             -needed to make html regression test results
    python                -executable needs to be on path. Required by
                          "docs" target.

  author:  Michael Heuer, modified by Keith James (JUnit support), modified
           Greg Cox (fixed documentation), modified by Craig Melsopp
           (configured for ensj project.)
  version: $Id: build.xml 215 2006-11-06 15:17:52Z holland $

  portions Copyright (c) 1999-2000 The Apache Software Foundation.

-->

<project default="compile" basedir=".">

  <!-- load build properties from file -->
  <property file="build.properties"/>

  <property name="build.name" value="ensj-${build.version}" />
  <property name="build.compiler" value="modern" />

  <!-- Save the current system classpath to pass to forked VMs -->
  <property name="env.classpath" value="${java.class.path}" />
  <property name="src.dir" value="./src" />
  <property name="reports.dir" value="./reports" />
  <property name="manifest.dir" value="./manifest" />
  <property name="manifest.file" value="defaultmanifest.txt" />
  <property name="data.dir" value="./data" />
  <property name="packages" value="org.*" />
  <property name="docs.dir" value="./docs"    />
  <property name="lib.dir" value="./lib" />

  <property name="build.dir" value="./build" />
  <property name="build.classes" value="${build.dir}/classes" />
  <property name="build.dist" value="${build.dir}/dist"    />
  <property name="build.docs" value="${build.dir}/docs" /> 

  <property name="reports.tests" value="${build.dir}/reports/tests" />

  <!-- classpath set to include jars -->
  <fileset id="lib.classpath" dir="${lib.dir}" includes= "*.jar"/>

  <!-- files to be excluded from distribution files. -->
  <patternset id="exclude.files">
    <exclude name="**/localstuff/**/*" />
    <exclude name="**/CVS/**/*" />
    <exclude name="**/*.dfPackage"/>
    <exclude name="**/?akefile"/>
    <exclude name="**/*.tpr"/>
    <exclude name="**/*.tws"/>
    <exclude name="**/TAGS"/>
  </patternset>



  <!-- complete classpath including jars, all .class files, and this
  directory (needed because we look for resources/... in classpath)  -->
  <path id="complete.classpath" >
    <pathelement path="src" />
    <pathelement path="${build.classes}" />
    <fileset refid="lib.classpath" />
  </path>

  <!-- Prepend library files to front of classpath -->
  <property name="build.classpath" value="last"/>

  <target name="init">

    <tstamp >
      <format property="TODAY_UK" pattern="yyyy-MM-d-HH-mm" locale="en"/>
      <format property="TODAY_UK_LONG" pattern="d MMM yyyy H:mm a" locale="en"/>
      <format property="TODAY_TIME" pattern="HH-mm" locale="en"/>
    </tstamp>

    <!-- Set properties based on OS type -->
    <condition property="os.unix">
      <os family="unix"/>
    </condition>
    
    <condition property="os.windows">
      <os family="windows"/>
    </condition>
    
    <!-- Check the current system classpath for JUnit -->
    <available classpath="${env.classpath}"
               classname="junit.framework.TestCase"
               property="junit.present" />

    <!-- Check the current system classpath for JUnit support in Ant (only in >= 1.3) -->
    <available classpath="${env.classpath}"
               classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTest"
               property="junit.support" />

    <fail unless="build.version" message="build.version not set. You
    might want to create a build.properties file in the same directory as build.xml." />	  

    <available property="mysql.jar.filename.present" file="${lib.dir}/${mysql.jar.filename}" />

    <fail unless="mysql.jar.filename.present"
  message="${mysql.jar.filename} not found in ${lib.dir}. Is the correct jar in build.properties and ${lib.dir}?"/>
  </target>



  <!-- Prepares the build directory -->
  <target name="prepare" depends="init">

    <mkdir dir="${build.dir}" />
    <mkdir dir="${build.classes}" />
    <mkdir dir="${build.docs}" />
    <mkdir dir="${build.dist}" />
    <mkdir dir="${reports.tests}" />

  </target>


  <!-- Compiles the source directory -->
  <target name="compile" depends="prepare"
  description="Compiles modified files." >

    <!-- DO NOT set deprecation="false" because it causes the Tru
    64/java141 to produce some broken class files in some cases.
    -->
    <javac
      srcdir="${src.dir}"
      destdir="${build.classes}"
      debug="true"
      deprecation="true"
      source="1.4" 
      target="1.4" 
    >
      <classpath>
        <fileset refid="lib.classpath"/>
      </classpath>
    </javac>
  </target>




  <!-- Checks that whole of cvs module compiles with just it's
  contents and the available jar files. 

  Exports contents of cvs module before compiling "src/" to
  "classes/". Relies on all supporting jars being available in
  "${lib.dir}". The classpath is set to empty to avoid accidentally
  using previously compiled classes or source files.

  Tricks to get javac to ignore classpath: (1)
  build.sysclasspath=ignore, (2) javac.classpath=dest

  -->
  <target name="cvs-export-build" description="Does a cvs export and builds that.">

    <property name="package" value="ensj-core" />
    <property name="destination" value="/tmp" />
    <property name="root" value="${destination}/${package}" />
    <property name="build.sysclasspath" value="ignore"/>

    <delete dir="${root}"/>
    
    <echo message="================================"/>
    <echo message="ENTER CVS PASSWORD IF NEEDED ..."/>

    <cvs command="-q export -D tomorrow" package="${package}" dest="${destination}" />


    <mkdir dir="${root}/classes" />
    

    <javac
      srcdir="${root}/src"
      classpath="${root}/classes"
      destdir="${root}/classes"
      extdirs="${lib.dir}"
      deprecation="false"
      depend="no"
      debug="true"
      source="1.4" 
      target="1.4" 
    />

  </target>



  <target name="jar" depends="compile" description="Build jar file.">

    <!-- Create an up to date manifest.-->
    <delete file="${build.dir}/${manifest.file}" />
    <copy file="${manifest.dir}/${manifest.file}" todir="${build.dir}" />
    <replace file="${build.dir}/${manifest.file}" 
      token="SPECIFICATION-VERSION" value="${build.version}" />
    <replace file="${build.dir}/${manifest.file}" 
      token="IMPLEMENTATION-VERSION" value="${build.version}" />
    <replace file="${build.dir}/${manifest.file}" 
      token="MYSQL-JAR-FILENAME" value="${mysql.jar.filename}" />

    <echo message="MYSQL-DRIVER-JAR = ${mysql.jar.filename}"/>

    <!-- copy resources to classes dir which is the root of the jar. -->
    <copy todir="${build.classes}">
      <fileset dir="src">
	<patternset refid="exclude.files"/>
        <include name="resources/**/*"/>
      </fileset>
    </copy>

    <jar
      jarfile="${build.dir}/${build.name}.jar"
      manifest="${build.dir}/${manifest.file}"
      >
      <fileset dir="${build.classes}">
        <patternset refid="exclude.files"/>
      </fileset>
    </jar>

    <!-- Always have ensj.jar pointing at the most recent version -->
    <copy file="${build.dir}/${build.name}.jar" tofile="${build.dir}/ensj.jar" overwrite="true"/>

  </target>



  <!-- html summary of results -->
  <target name="test-summary" depends="init">
    <antcall target="test-summary-impl"/>
  </target>


  <!-- NOTE: "init" MUST be included by calling task, we can't incude
  it in a depends list here because that causes a problem with
  multiple calls to "available" task in "init" block -->
  
  <target name="test-summary-impl">
    <junitreport todir="${reports.tests}">
      <fileset dir="${reports.tests}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${reports.tests}/html"/>
    </junitreport>
  </target>


  <target name="tests" 
  depends="tests-core, tests-compara, tests-variation"
  if="junit.support"
  description="Runs all JUnit tests."/>


  <target name="tests-core" depends="compile" if="junit.support"
  description="Runs core JUnit tests.">

    <!-- Note: we need a single JVM instance for all the tests so that
         the code in org.ensembl.test.Base.setUp() which handles the
         proper creation and deletion of test databases works. We
         ensure a single JVM is used by setting these parameters.
          - junit.forkmode="once" or "perBatch"
          - junit.batchtest.fork="true"
    -->

    <junit printsummary="on" haltonfailure="no" forkmode="once">

      <formatter type="xml" />

      <classpath ><path refid="complete.classpath"/></classpath>

      <batchtest fork="true" todir="${reports.tests}" if="junit.present">
        <fileset dir="${build.classes}">
          <include name="org/ensembl/test/*Test.class" />
          <exclude name="**/*WriteBack*" />
        </fileset>
      </batchtest>
    </junit>

    <antcall target="test-summary-impl"/>

  </target>


  <target name="tests-compara" depends="init,compile"
  if="junit.support"
  description="Runs compara JUnit tests.">

    <!-- Note: we need a single JVM instance for all the tests so that
         the code in org.ensembl.test.Base.setUp() which handles the
         proper creation and deletion of test databases works. We
         ensure a single JVM is used by setting these parameters.
          - junit.forkmode="once" or "perBatch"
          - junit.batchtest.fork="true"
    -->

    <junit printsummary="on" haltonfailure="no" forkmode="once">

      <formatter type="xml" />

      <classpath ><path refid="complete.classpath"/></classpath>

      <batchtest fork="true" todir="${reports.tests}"
      if="junit.present">
        <fileset dir="${build.classes}">
          <include name="org/ensembl/compara/test/*Test.class" />
        </fileset>
      </batchtest>

    </junit>

    <antcall target="test-summary-impl"/>

  </target>


  <target name="tests-variation" depends="init,compile"
  if="junit.support"
  description="Runs variation JUnit tests.">

    <!-- Note: we need a single JVM instance for all the tests so that
         the code in org.ensembl.test.Base.setUp() which handles the
         proper creation and deletion of test databases works. We
         ensure a single JVM is used by setting these parameters.
          - junit.forkmode="once" or "perBatch"
          - junit.batchtest.fork="true"
    -->

    <junit printsummary="on" haltonfailure="no" forkmode="once">
      <formatter type="xml" />
      <classpath ><path refid="complete.classpath"/></classpath>
      <batchtest fork="true" todir="${reports.tests}"
      if="junit.present">
        <fileset dir="${build.classes}">
          <include name="org/ensembl/variation/test/*Test.class" />
        </fileset>
      </batchtest>
    </junit>

    <antcall target="test-summary-impl"/>

  </target>



  <target name="build"  depends="init,prepare,docs,jar"
  description="Build distribution files.">

    <zip destfile="${build.dist}/${build.name}-docs.zip"
    basedir="${build.dir}" includes="docs/**/*" />

    <zip destfile="${build.dist}/${build.name}-src.zip">
      <zipfileset dir="src" includes="**/*.java"/>
      <zipfileset dir="src">
	<patternset refid="exclude.files"/>
        <include name="resources/**/*"/>
      </zipfileset>
    </zip>


    <zip destfile="${build.dist}/${build.name}-src_jython.zip"
    basedir="." includes="src_jython/**/*.py" />

    <copy file="${build.dir}/${build.name}.jar" todir="${build.dist}"/>

    <copy file= "${lib.dir}/${mysql.jar.filename}" todir="${build.dist}"/>
    
    <copy file="docs/RELEASE_NOTES" todir="${build.dist}"/>

    <copy file="src/resources/data/example_core_database.properties"
    todir="${build.dist}"/>
    <copy file="src/resources/data/example_variation_database.properties" todir="${build.dist}"/>

  </target>



  <target name="docs" depends="prepare" 
  description="Build ensj docs."
  > 

  <!-- Copy lib/java2html.jar to $ANT_HOME/lib or $HOME/.ant/lib -->
  <taskdef name="java2html"
    classname="de.java2html.anttasks.Java2HtmlTask"
    classpath="${build.dir}"
  />
  <java2html
    srcdir="${src.dir}/org/ensembl/"
    destdir="${build.docs}/api/org/ensembl/"
    includes="Example.java"
    style="eclipse"
    showLineNumbers="false"
  />

    <copy todir="${build.docs}/api/org/ensembl" file="${src.dir}/org/ensembl/Example.java"/>

    <copy todir="${build.docs}">
      <fileset dir="${docs.dir}">
        <include name="*.html"/>
        <include name="LICENSE"/>
        <include name="RELEASE_NOTES"/>
      </fileset>

      <fileset dir=".">
        <include name="src_jython/**/*.py"/>
      </fileset>

      <filterset>
        <filter token="NAVIGATION-LINKS" value="
&lt;a href=&quot;quickstart.html&quot;&gt;Quick start&lt;/a&gt; 
- &lt;a href=&quot;download.html&quot;&gt;Download&lt;/a&gt;
- &lt;a href=&quot;ensj-overview.html&quot;&gt;Overview&lt;/a&gt; 
- &lt;a href=&quot;api/index.html&quot;&gt;API&lt;/a&gt;
- &lt;a href=&quot;faq.html&quot;&gt;FAQ&lt;/a&gt;
- &lt;a href=&quot;howto.html&quot;&gt;How-To&lt;/a&gt;
- &lt;a href=&quot;api/org/ensembl/Example.java.html&quot;&gt;Examples&lt;/a&gt;
- &lt;a href=&quot;jython.html&quot;&gt;Jython&lt;/a&gt;  
- &lt;a href=&quot;contact.html&quot;&gt;Contact&lt;/a&gt;
- &lt;a href=&quot;links.html&quot;&gt;Links&lt;/a&gt;
- &lt;a href=&quot;RELEASE_NOTES&quot;&gt;Release Notes&lt;/a&gt;  
- &lt;a href=&quot;LICENSE&quot;&gt;License&lt;/a&gt;
"/>  
      </filterset>

    </copy>

    
    <exec executable="python"> 
      <arg line="scripts/py2html.py ${build.docs}/src_jython/ensembl.py ${build.docs}/src_jython/examples/all_genes.py  ${build.docs}/src_jython/examples/dump_sources.py  ${build.docs}/src_jython/examples/ensdescribe.py  ${build.docs}/src_jython/examples/enspeptidize.py  ${build.docs}/src_jython/examples/mysql_options.py"/>
    </exec>



    <javadoc 
       sourcepath="${src.dir}"
       destdir="${build.docs}/api"
      author="true"
      version="true"
      use="true"
      windowtitle="Ensj API"
      doctitle="Ensj (Version ${build.version})"
      packagenames="org.ensembl,
       org.ensembl.datamodel,
       org.ensembl.driver, 
       org.ensembl.registry, 
       org.ensembl.variation,
       org.ensembl.variation.datamodel,
       org.ensembl.variation.driver, 
       org.ensembl.compara,
       org.ensembl.compara.datamodel,
       org.ensembl.compara.driver, org.ensembl.util"
       overview="${docs.dir}/overview.html"
       >
       
       <classpath>
         <fileset refid="lib.classpath"/>
       </classpath>

    </javadoc>    

    <copy tofile="${build.docs}/api/org/ensembl/Example.java.txt"
    file="${src.dir}/org/ensembl/Example.java" />

  </target>



  <target name="docs_web_commit" description="Copy and commit docs to htdocs directory.">
  
  <exec executable="python"> 
      <arg line="scripts/updatecvsdirtree.py ${htdocs.dir} ${build.docs}"/>
    </exec>
  </target>

  <!-- Cleans everything -->
  <target name="clean"
  description="Deletes the build directory.">
    <delete dir="${build.dir}" />
  </target>


</project>



