#!/usr/bin/perl -w

use strict;

if(scalar(@ARGV)<2) {
	die "This program takes at least two parameters:\n\tone or more input files in msf format\n\tthe output XML file\n";
}

local(*OUTPUT);

open(OUTPUT,'>'.$ARGV[$#ARGV]) || die "ERROR: Unable to open ".$ARGV[$#ARGV]." for writing\n";

# And now, let's work!!!
print OUTPUT <<EOF;
<?xml version='1.0' encoding='ISO-8859-1'?>

<!--
	This XML document was generated by Msf2ODB.pl script
	which was created by José María Fernández González
	jmfernandez\@cnio.es CNIO (C) 2006
-->
<MSASet xmlns='http://www.pdg.cnb.uam.es/jmfernandez/ORFandDB/4.0/MSA'>
EOF

foreach my $ifile (@ARGV[0..($#ARGV - 1)]) {
	local(*IFILE);
	
	my($openline)=undef;
	if($ifile =~ /\.gz$/) {
		$openline='gunzip -c "'.$ifile.'" |';
	} else {
		$openline='<'.$ifile;
	}
	
	if(open(IFILE,$openline)) {
		my($line);
		my(%mul)=();
		my(@mulord)=();
		my($getmsf)=undef;
		
		while($line=<IFILE>) {
			chomp($line);
			next if($line eq '');
			
			if(defined($getmsf)) {
				if($line eq '//') {
					warn "ERROR: Incorrect file format: alignment began twice\n";
					@mulord=();
					last;
				}
				# A multiple sequence alignment line?
				my($id,$align)=split(/[ \t]+/,$line,2);
				# Removing white spaces from the alignment
				$align =~ tr/ //d  if(defined($align));
				unless(defined($align) && $id ne '') {
					warn "ERROR: Incorrect file format: incorrect alignment line\n";
					@mulord=();
					last;
				}
				
				if(exists($mul{$id})) {
					$mulord[$mul{$id}]->[1] .= $align;
				} else {
					# Do we have extra info?
					my($bareid,$begin,$end)=(undef,undef,undef);
					if($id =~ /^([^\/]+)\/([1-9][0-9]*)-([1-9][0-9]*)$/) {
						$begin=$2;
						$end=$3;
						$bareid=$1;
					} else {
						$bareid=$id;
					}

					push(@mulord,[$bareid,$align,$begin,$end,(defined($begin)?$begin:1)]);
					$mul{$id}=$#mulord;
				}
			} elsif($line eq '//') {
				$getmsf='';
			}
		}
		
		if(scalar(@mulord)>0) {
			# First, check!!!!
			my($alignlength)=undef;
			foreach my $msa (@mulord) {
				$alignlength=length($msa->[1])  unless(defined($alignlength));
				if($alignlength!=length($msa->[1])) {
					warn "ERROR: Incorrect file format: alignment element $msa->[0] should have $alignlength residues/gaps instead of ",length($msa->[1]),"\n";
					$alignlength=undef;
					last;
				}
			}
			
			if(defined($alignlength)) {
				# We have to write the MSA
				print OUTPUT "\t<MSA length='$alignlength'>\n";
				my($id)=1;
				foreach my $msa (@mulord) {
					print OUTPUT "\t\t<gappedFragment name='".$msa->[0]."'",
						(defined($msa->[2])?" start='$msa->[2]'":''),
						(defined($msa->[3])?" end='$msa->[3]'":''),
						"><content type='res' id='$id'>$msa->[1]</content></gappedFragment>\n";
					$id++;
				}

				print OUTPUT "\t\t<residues>\n";
				foreach my $ap (0..($alignlength-1)) {
					my($jp)=undef;
					$id=1;
					foreach my $msa (@mulord) {
						my($v)=substr($msa->[1],$ap,1);
						# Skipping gaps
						unless($v eq '-' || $v eq '.') {
							unless(defined($jp)) {
								print OUTPUT "\t\t\t<rs p='",($ap+1),"'>\n";
								$jp='';
							}
							print OUTPUT "\t\t\t\t<r i='$id' p='$msa->[4]' v='$v' />\n";
							$msa->[4]++;
						}
						$id++;
					}
					print OUTPUT "\t\t\t</rs>\n"  if(defined($jp));
				}
				print OUTPUT "\t\t</residues>\n";

				print OUTPUT "\t</MSA>\n";
			}
		}

		close(IFILE);
	} else {
		warn "ERROR: Unable to open $ifile for reading\n";
	}
}

print OUTPUT "</MSASet>\n";

# We have to close the output file once we have finished!
close(OUTPUT);
