<?xml version="1.0" encoding="ISO-8859-1"?>

<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
		xmlns:u="http://uniprot.org/uniprot"
		exclude-result-prefixes="u"
		xmlns="http://www.pdg.cnb.uam.es/jmfernandez/ORFandDB/3/__ORFANDDB__"
		version="1.0">

<!--
	$Id: ReadSeq.xst,v 1.7 2002/07/24 15:05:45 jmfernandez Exp $
	Transformation stylesheet from UniProt to ORFandDB
	Made by José María Fernández González
	Be careful!!!!! This is a correct style sheet,
	it must be correctly instantiated!!
	All the variables used starts with $ORF
-->

<!--
	External parameter definitions, along with their
	default values
-->

<xsl:param name="ORFroot">__ORFANDDB__</xsl:param>
<xsl:param name="curdate">now</xsl:param>
<!-- When set, it is the chromosome type -->
<xsl:param name="ctype">U</xsl:param>
<!-- When set, it is the genome for the chromosome -->
<xsl:param name="genome">?</xsl:param>
<!-- This parameter must be a date in undashed ISO8601 format -->
<xsl:param name="lastdate" />
<!-- When this flag is assigned, it sets autocommit values -->
<xsl:param name="autocommit" />
<!-- Block Usage to break in n transactions a big file -->
<xsl:param name="block" />

<xsl:param name="table">BioEntry</xsl:param>
<xsl:param name="database">UniProt</xsl:param>
<xsl:param name="databaseKW">UniProtKW</xsl:param>
<xsl:param name="dataunk">UnKnown</xsl:param>

<!--
	The doctype-system="{$ORFroot}.xsd" was erased because it didn't work
	and it is set from the main program. Remember to use it when testing the
	stylesheet!!!
-->
<xsl:output
	method="xml"
	indent="yes"
	encoding="ISO-8859-1"
/>

<!--=================-->
<!-- Transformations -->
<!--=================-->

<!-- root node -->
<xsl:template match="/">
	<xsl:comment>
		<xsl:text>
$Id: UniProt.xst,v 1.7 2002/07/24 15:05:45 jmfernandez Exp $
File generated by the filter from UniProt XML format to ORFandDB XML format.
The filter has been developed under the ORFandDB project in the
Protein Design Group (http://www.pdg.cnb.uam.es)

Author: José María Fernández González (jmfernandez@cnb.uam.es), (C) 2004
</xsl:text>
	</xsl:comment>
	<xsl:element name="{$ORFroot}" namespace="http://www.pdg.cnb.uam.es/jmfernandez/ORFandDB/3/__ORFANDDB__">
		<xsl:if test="$autocommit">
			<xsl:attribute name="autoCommit"><xsl:value-of select="$autocommit" /></xsl:attribute>
		</xsl:if>
		<xsl:apply-templates select="u:uniprot" />
	</xsl:element>
</xsl:template>

<!-- Sequence set specification -->
<xsl:template match="u:uniprot">
	<xsl:choose>
		<xsl:when test="$block or $lastdate">
			<xsl:for-each select="u:entry">
				<logicalBlock>
					<xsl:apply-templates select="." />
				</logicalBlock>
			</xsl:for-each>
		</xsl:when>
		<xsl:otherwise>
			<xsl:apply-templates select="u:entry" />
		</xsl:otherwise>
	</xsl:choose>
</xsl:template>

<!-- Each uniprot entry -->
<xsl:template match="u:entry">
	<xsl:variable name="accnumber" select="u:accession[1]"/>
	<xsl:variable name="thislast" select="translate(@updated,'-','')" />
	
	<xsl:comment> <xsl:value-of select="$accnumber" /> </xsl:comment>
	<xsl:choose>
		<xsl:when test="not($lastdate) or $lastdate &lt; $thislast">
			<xsl:if test="$lastdate">
				<xsl:variable name="thiscreate" select="translate(@created,'-','')"/>
				<!-- Are we updating, or only creating? -->
				<xsl:variable name="mode">
					<xsl:choose>
						<xsl:when test="$lastdate &gt; $thiscreate">
							<xsl:value-of select="'update'" />
						</xsl:when>
						<xsl:otherwise>
							<xsl:value-of select="'insert'" />
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<logicalSet table='{$table}' mode='{$mode}'>
					<xsl:apply-templates select="u:accession" />
				</logicalSet>
			</xsl:if>
			
			<Protein Preliminary='false' MolWeight='{u:sequence/@mass}'>
				<Sequence Sequence='{u:sequence/text()}' Taxonomy='' ATCG='false' SeqLength='{u:sequence/@length}'>
					<BioEntry BType='ProSeqBio' AccNumber='{$accnumber}' DbName='{$database}' Description='{u:protein/u:name}' UDate='{@updated}' CrDate='{@created}'/>
				</Sequence>
			</Protein>
			
			<!-- Storing the old accnumbers -->
			<xsl:apply-templates select="u:accession">
				<xsl:with-param name="acc" select="$accnumber" />
			</xsl:apply-templates>
			<xsl:apply-templates select="u:name">
				<xsl:with-param name="acc" select="$accnumber" />
			</xsl:apply-templates>
			<!-- Storing the keywords -->
			<xsl:apply-templates select="u:keyword">
				<xsl:with-param name="acc" select="$accnumber" />
			</xsl:apply-templates>
			<!--
				Storing the TaxID from each organism
				and the other links (including MEDLINE)
			-->
			<xsl:apply-templates select=".//u:dbReference">
				<xsl:with-param name="acc" select="$accnumber" />
			</xsl:apply-templates>
			<!-- Storing the other links
			<xsl:apply-templates select="u:dbReference">
				<xsl:with-param name="acc" select="$accnumber" />
			</xsl:apply-templates>
			 -->
		</xsl:when>
		<xsl:otherwise>
			<xsl:comment> <xsl:value-of select="$lastdate" /> </xsl:comment>
			<xsl:comment> <xsl:value-of select="$thislast" /> </xsl:comment>
			<logicalSet table='{$table}' mode='untouched'>
				<xsl:apply-templates select="u:accession" />
			</logicalSet>
		</xsl:otherwise>
	</xsl:choose>
</xsl:template>

<!-- To be finished -->
<xsl:template match="u:accession|u:name">
	<xsl:param name="acc" />
	
	<xsl:choose>
		<!-- This is information for links -->
		<xsl:when test="$acc">
			<xsl:variable name="idType">
				<xsl:choose>
					<xsl:when test="name()='accession'">
						<xsl:value-of select="'P'" />
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="'S'" />
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			<mergeBlock mode='once'>
				<logicalSet table='Identity' mode='merge'>
					<tupleValue>
						<columnValue name='AccNumber'><xsl:value-of select="text()" /></columnValue>
						<columnValue name='DbName'><xsl:value-of select="$database" /></columnValue>
						<columnValue name='idtype'><xsl:value-of select="$idType" /></columnValue>
					</tupleValue>
				</logicalSet>
				<Identity AccNumber='{text()}' DbName='{$database}' idtype='{$idType}' />
			</mergeBlock>
			<Identified_By AccNumber_B='{$acc}' DbName_B='{$database}' AccNumber_I='{text()}' DbName_I='{$database}'/>
		</xsl:when>
		<!-- This is information for keeping updates, so issue tuple values -->
		<xsl:otherwise>
			<tupleValue>
				<columnValue name='AccNumber'><xsl:value-of select="text()" /></columnValue>
				<columnValue name='DbName'><xsl:value-of select="$database" /></columnValue>
			</tupleValue>
		</xsl:otherwise>
	</xsl:choose>
</xsl:template>

<!-- To be finished -->
<xsl:template match="u:keyword">
	<xsl:param name="acc" />
	
	<!-- This is information for links -->
	<xsl:if test="$acc">
		<mergeBlock mode='once'>
			<logicalSet table='Identity' mode='merge'>
				<tupleValue>
					<columnValue name='AccNumber'><xsl:value-of select="@id" /></columnValue>
					<columnValue name='DbName'><xsl:value-of select="$databaseKW" /></columnValue>
					<columnValue name='idtype'>P</columnValue>
				</tupleValue>
			</logicalSet>
			<Identity AccNumber='{@id}' DbName='{$databaseKW}' idtype='P' />
		</mergeBlock>
		<Has_Links_To AccNumber_B='{$acc}' DbName_B='{$database}' AccNumber_I='{@id}' DbName_I='{$databaseKW}'/>
	</xsl:if>
</xsl:template>

<!-- Handling database links -->
<xsl:template match="u:dbReference">
	<xsl:param name="acc" />
	
	<xsl:choose>
		<xsl:when test="@type='NCBI Taxonomy'">
			<Has_Inside
				AccNumber_S='{$acc}'
				DbName_S='{$database}'
				AccNumber_C='{@id}.{$ctype}.{$genome}'
				DbName_C='{$dataunk}'
			/>
		</xsl:when>
		<xsl:when test="@type='EC'">
			<Has_Activity
				AccNumber='{$acc}'
				DbName='{$database}'
				ECnumber='{@id}'
			/>
		</xsl:when>
		<xsl:otherwise>
			<xsl:variable name="dbname">
				<xsl:choose>
					<xsl:when test="@type='EMBL'"><xsl:value-of select="@type" /></xsl:when>
					<xsl:when test="@type='PIR'"><xsl:value-of select="@type" /></xsl:when>
					<xsl:when test="@type='InterPro'"><xsl:value-of select="@type" /></xsl:when>
					<xsl:when test="@type='HSSP'"><xsl:value-of select="@type" /></xsl:when>
					<xsl:when test="@type='PDB'"><xsl:value-of select="@type" /></xsl:when>
					<xsl:when test="@type='Pfam'"><xsl:value-of select="@type" /></xsl:when>
					<xsl:when test="@type='PRINTS'"><xsl:value-of select="@type" /></xsl:when>
					<xsl:when test="@type='PROSITE'"><xsl:value-of select="@type" /></xsl:when>
					<xsl:when test="@type='PubMed'"><xsl:value-of select="@type" /></xsl:when>
					<xsl:when test="@type='MEDLINE'"><xsl:value-of select="@type" /></xsl:when>
					<xsl:otherwise>UNK</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			<xsl:if test="$dbname!='UNK'">
				<mergeBlock mode='once'>
					<logicalSet table='Identity' mode='merge'>
						<tupleValue>
							<columnValue name='AccNumber'><xsl:value-of select="@id" /></columnValue>
							<columnValue name='DbName'><xsl:value-of select="$dbname" /></columnValue>
							<columnValue name='idtype'>P</columnValue>
						</tupleValue>
					</logicalSet>
					<Identity AccNumber='{@id}' DbName='{$dbname}' idtype='P' />
				</mergeBlock>
				<Has_Links_To AccNumber_B='{$acc}' DbName_B='{$database}' AccNumber_I='{@id}' DbName_I='{$dbname}'/>
			</xsl:if>
			<xsl:if test="$dbname='UNK'">
				<xsl:comment><xsl:value-of select="@type" />:<xsl:value-of select="@id" /> link was ignored</xsl:comment>
			</xsl:if>
		</xsl:otherwise>
	</xsl:choose>
</xsl:template>

</xsl:stylesheet>