<!-- ============================================
     ::DATATOOL:: Generated from "blastxml.asn"
     ::DATATOOL:: by application DATATOOL version 1.5.0
     ::DATATOOL:: on 06/06/2006 23:03:48
     ============================================ -->

<!-- ============================================ -->
<!-- This section is mapped from module "NCBI-BlastOutput"
================================================= -->
<!--
$Id: blastxml.asn,v 6.7 2002/07/17 22:28:13 dondosha Exp $

$Revision: 6.7 $
**********************************************************************

  ASN.1 for simplified BLAST output in XML
  by James Ostell, Yuri Wolf and Sergey Shavirin, 2000


 $Log: blastxml.asn,v $
 Revision 6.7  2002/07/17 22:28:13  dondosha
 Added support for megablast XML output

 Revision 6.6  2001/05/03 17:52:16  shavirin
 Adopted for usage with mani-iterational XML definition.

 Revision 6.4  2000/11/08 20:07:20  shavirin
 Added new parameter align_len analogos to the number reported in
 the Traditional Blast Output.

 Revision 6.3  2000/10/23 20:24:03  shavirin
 Few parameters were changed to OPTIONAL to allow XML without results:
 failure or no hits found condition.

 Revision 6.2  2000/08/11 17:48:35  shavirin
 Small fix.

 Revision 6.1  2000/08/09 20:43:12  shavirin
 Initial revision.


**********************************************************************
-->



<!ELEMENT BlastOutput (
        BlastOutput_program, 
        BlastOutput_version, 
        BlastOutput_reference, 
        BlastOutput_db, 
        BlastOutput_query-ID, 
        BlastOutput_query-def, 
        BlastOutput_query-len, 
        BlastOutput_query-seq?, 
        BlastOutput_param, 
        BlastOutput_iterations, 
        BlastOutput_mbstat?)>

<!ELEMENT BlastOutput_program (#PCDATA)> <!-- BLAST program: blastp, tblastx etc. -->
<!ELEMENT BlastOutput_version (#PCDATA)> <!-- Program version  -->
<!ELEMENT BlastOutput_reference (#PCDATA)> <!-- Steven, David, Tom and others -->
<!ELEMENT BlastOutput_db (#PCDATA)> <!-- BLAST Database name -->
<!ELEMENT BlastOutput_query-ID (#PCDATA)> <!-- SeqId of query -->
<!ELEMENT BlastOutput_query-def (#PCDATA)> <!-- Definition line of query -->
<!ELEMENT BlastOutput_query-len (%INTEGER;)> <!-- length of query sequence -->
<!ELEMENT BlastOutput_query-seq (#PCDATA)> <!-- query sequence itself -->
<!ELEMENT BlastOutput_param (Parameters)> <!-- search parameters -->
<!ELEMENT BlastOutput_iterations (Iteration*)>
<!ELEMENT BlastOutput_mbstat (Statistics)> <!-- Mega BLAST search statistics -->

<!ELEMENT Iteration (
        Iteration_iter-num, 
        Iteration_query-ID?, 
        Iteration_query-def?, 
        Iteration_query-len?, 
        Iteration_hits?, 
        Iteration_stat?, 
        Iteration_message?)>

<!ELEMENT Iteration_iter-num (%INTEGER;)> <!-- iteration number -->
<!ELEMENT Iteration_query-ID (#PCDATA)> <!-- SeqId of query -->
<!ELEMENT Iteration_query-def (#PCDATA)> <!-- Definition line of query -->
<!ELEMENT Iteration_query-len (%INTEGER;)> <!-- length of query sequence -->
<!ELEMENT Iteration_hits (Hit*)> <!-- Hits one for every db sequence -->
<!ELEMENT Iteration_stat (Statistics)> <!-- search statistics             -->
<!ELEMENT Iteration_message (#PCDATA)> <!-- Some (error?) information -->

<!ELEMENT Parameters (
        Parameters_matrix?, 
        Parameters_expect, 
        Parameters_include?, 
        Parameters_sc-match?, 
        Parameters_sc-mismatch?, 
        Parameters_gap-open, 
        Parameters_gap-extend, 
        Parameters_filter?, 
        Parameters_pattern?, 
        Parameters_entrez-query?)>

<!ELEMENT Parameters_matrix (#PCDATA)> <!-- Matrix used (-M) -->
<!ELEMENT Parameters_expect (%REAL;)> <!-- Expectation threshold (-e) -->
<!ELEMENT Parameters_include (%REAL;)> <!-- Inclusion threshold (-h) -->
<!ELEMENT Parameters_sc-match (%INTEGER;)> <!-- match score for NT (-r) -->
<!ELEMENT Parameters_sc-mismatch (%INTEGER;)> <!-- mismatch score for NT (-q) -->
<!ELEMENT Parameters_gap-open (%INTEGER;)> <!-- Gap opening cost (-G) -->
<!ELEMENT Parameters_gap-extend (%INTEGER;)> <!-- Gap extension cost (-E) -->
<!ELEMENT Parameters_filter (#PCDATA)> <!-- Filtering options (-F) -->
<!ELEMENT Parameters_pattern (#PCDATA)> <!-- PHI-BLAST pattern -->
<!ELEMENT Parameters_entrez-query (#PCDATA)> <!-- Limit of request to Entrez query -->

<!ELEMENT Statistics (
        Statistics_db-num, 
        Statistics_db-len, 
        Statistics_hsp-len, 
        Statistics_eff-space, 
        Statistics_kappa, 
        Statistics_lambda, 
        Statistics_entropy)>

<!ELEMENT Statistics_db-num (%INTEGER;)> <!-- Number of sequences in BLAST db -->
<!ELEMENT Statistics_db-len (%INTEGER;)> <!-- Length of BLAST db -->
<!ELEMENT Statistics_hsp-len (%INTEGER;)> <!-- Effective HSP length -->
<!ELEMENT Statistics_eff-space (%REAL;)> <!-- Effective search space -->
<!ELEMENT Statistics_kappa (%REAL;)> <!-- Karlin-Altschul parameter K -->
<!ELEMENT Statistics_lambda (%REAL;)> <!-- Karlin-Altschul parameter Lambda -->
<!ELEMENT Statistics_entropy (%REAL;)> <!-- Karlin-Altschul parameter H -->

<!ELEMENT Hit (
        Hit_num, 
        Hit_id, 
        Hit_def, 
        Hit_accession, 
        Hit_len, 
        Hit_hsps?)>

<!ELEMENT Hit_num (%INTEGER;)> <!-- hit number -->
<!ELEMENT Hit_id (#PCDATA)> <!-- SeqId of subject -->
<!ELEMENT Hit_def (#PCDATA)> <!-- definition line of subject -->
<!ELEMENT Hit_accession (#PCDATA)> <!-- accession -->
<!ELEMENT Hit_len (%INTEGER;)> <!-- length of subject -->
<!ELEMENT Hit_hsps (Hsp*)> <!-- all HSP regions for the given subject -->

<!ELEMENT Hsp (
        Hsp_num, 
        Hsp_bit-score, 
        Hsp_score, 
        Hsp_evalue, 
        Hsp_query-from, 
        Hsp_query-to, 
        Hsp_hit-from, 
        Hsp_hit-to, 
        Hsp_pattern-from?, 
        Hsp_pattern-to?, 
        Hsp_query-frame?, 
        Hsp_hit-frame?, 
        Hsp_identity?, 
        Hsp_positive?, 
        Hsp_gaps?, 
        Hsp_align-len?, 
        Hsp_density?, 
        Hsp_qseq, 
        Hsp_hseq, 
        Hsp_midline?)>

<!ELEMENT Hsp_num (%INTEGER;)> <!-- HSP number -->
<!ELEMENT Hsp_bit-score (%REAL;)> <!-- score (in bits) of HSP -->
<!ELEMENT Hsp_score (%REAL;)> <!-- score of HSP -->
<!ELEMENT Hsp_evalue (%REAL;)> <!-- e-value of HSP -->
<!ELEMENT Hsp_query-from (%INTEGER;)> <!-- start of HSP in query -->
<!ELEMENT Hsp_query-to (%INTEGER;)> <!-- end of HSP -->
<!ELEMENT Hsp_hit-from (%INTEGER;)> <!-- start of HSP in subject -->
<!ELEMENT Hsp_hit-to (%INTEGER;)> <!-- end of HSP in subject -->
<!ELEMENT Hsp_pattern-from (%INTEGER;)> <!-- start of PHI-BLAST pattern -->
<!ELEMENT Hsp_pattern-to (%INTEGER;)> <!-- end of PHI-BLAST pattern -->
<!ELEMENT Hsp_query-frame (%INTEGER;)> <!-- translation frame of query -->
<!ELEMENT Hsp_hit-frame (%INTEGER;)> <!-- translation frame of subject -->
<!ELEMENT Hsp_identity (%INTEGER;)> <!-- number of identities in HSP -->
<!ELEMENT Hsp_positive (%INTEGER;)> <!-- number of positives in HSP -->
<!ELEMENT Hsp_gaps (%INTEGER;)> <!-- number of gaps in HSP -->
<!ELEMENT Hsp_align-len (%INTEGER;)> <!-- length of the alignment used -->
<!ELEMENT Hsp_density (%INTEGER;)> <!-- score density -->
<!ELEMENT Hsp_qseq (#PCDATA)> <!-- alignment string for the query (with gaps) -->
<!ELEMENT Hsp_hseq (#PCDATA)> <!-- alignment string for subject (with gaps) -->
<!ELEMENT Hsp_midline (#PCDATA)> <!-- formating middle line -->

